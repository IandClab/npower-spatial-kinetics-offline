function done = entropy(data, varargin)
%ENTROPY.M
%
%   s = entropy(data, species, mass, T, P)
%       or
%   s = entropy(data, species, mass, T)
%       or
%   s = entropy(data, state)
%
%Computes a 2-D array of entropy for various mixtures
%at various temperatures.
%=================================================================
%data       -   janaaf data struct array 
%                    OR 
%               cell array containing multiple janaaf data struct arrays
%
%
%species    -   cell array of species names or a single species name
%
%mass       -   2-D array of mass fractions or absolute species masses
%               each row corresponds to an element in species (t.f. 
%               needs the same number of rows as species has elements)
%               In addition, each column in mass will correspond to a 
%               new set of data in the output.  In this way, one call
%               to THERMAL can return multiple mixture results.
%
%T          -   Temperature vector.  T must be a vector of the same length
%               as P or a scalar indicating a constant temperature. 
%
%P          -   Pressure vector.  P must be a vector of the same length as
%               T or a scalar indicating a constant pressure.  If P is 
%               omitted, then it will be set to 101300 Pa or standard
%               pressure.
%
%state      -   The state structure such as one generated by STATEGEN.
%
%s     	    -   a 2-D numeric array containing the computed property values.
%               s(n,m) = entropy at temperature (n) and mixture (m)
%
%See also:
%   enthalpy, spheat
% 
%HOT-tdb release 2.0
%(c) 2007-2009 Christopher R. Martin, Virginia Tech


% defaults
Pflag = 0;
Tref = 298.15;
Pref = 101300;



% check for a state structure
if isstruct(varargin{1})
    % if one is present, grab the relevant information
    statemode = 1;
    mass = varargin{1}.mass;
    species = varargin{1}.species;
    T = varargin{1}.T;
    P = varargin{1}.P;
else
    statemode = 0;
    species = varargin{1};
    mass = varargin{2};
    T = varargin{3};
end



%check data
if iscell(data)    % if data is a single JANAAF library
    Ndset = length(data);
    fitflag = zeros(Ndset,1);
    for index = 1:Ndset
        fitflag(index) = isfield(data{index}, 'F');
    end
else
    fitflag = isfield(data, 'F');   % check to see if the library uses a fit function or lookup tables
    data = {data};  % force the non-cell into a single element cell array.
    Ndset = 1;
end

%check species
if iscell(species)
    Nspec = length(species);    % find the number of species
elseif ischar(species)
    species = {species};        % force the species string into a cell array
    Nspec = 1;
else
    error('Illegal species specifier.  Must be a string or cell array of strings.')
end

%check mass
if ~isnumeric(mass)
    error('Mass vector must be numeric')
elseif size(mass,1) ~= Nspec
    error('Mass vector must have the same number of rows as elements in the species cell array')
else
    Nmass = size(mass,2);
end

% check temperature
if isnumeric(T)
    Ntemp = numel(T);
    T = reshape(T,Ntemp,1);
else
    error('Illegal temperature vector - must be a numeric array.')
end


% deal with pressure
if nargin>4
    Pflag = 1;
    P = varargin{4};
elseif statemode
    Pflag = P~=Pref;
end


if Pflag
    % check pressure
    if isnumeric(P)
        Npress = numel(P);
        if Npress==1
            P = P*ones(size(T));
        elseif Ntemp==1
            T = T*ones(size(P));
            Ntemp = Npress;
        elseif Npress ~= Ntemp
            error('Temp-Pressure vector length missmatch.')
        end
    else
        error('Illegal pressure vector - must be a numeric array.')
    end
end

% initialize the output array.
done = zeros(Ntemp,Nmass);

% loop through the species (do this first to minimize the number of searches)
for specindex = 1:Nspec
    
    % search the libraries for the current specie
    libindex = 0;
    libsubindex = [];
    while isempty(libsubindex) & libindex < Ndset
        libindex = libindex+1;
        libsubindex = janfind(data{libindex}, 'species', species{specindex});
    end
    % if the specie doesn't exist in any of the libraries
    if isempty(libsubindex)
        error(['Specie , ''' species{specindex} ''', not found.'])
    elseif length(libsubindex)>1    % if multiple exist
        error(['Found more than one specie with the name, ''' species{specindex} '''.'])
    end

    if Pflag
        % compute the gas constant for this species
        R = 8314.427/data{libindex}(libsubindex).MW;
    end
    
    for massindex = 1:Nmass
        % normalize the mass column
        mass(:,massindex) = mass(:,massindex) / norm(mass(:,massindex),1);
        
               % if the current library uses fit functions
        if fitflag(libindex) % if the containing library uses fit functions
            done(:, massindex) = done(:, massindex) + mass(specindex,massindex)*...
                (janfit(data{libindex}(libsubindex).C,data{libindex}(libsubindex).F-1,data{libindex}(libsubindex).T, T(:),'deriv',-1,'reference',Tref)+...
                data{libindex}(libsubindex).sref);
        else % if the containing library uses lookup tables
            done(:,massindex) = done(:,massindex) + mass(specindex,massindex)*(...
                janlookup(data{libindex}(libsubindex),'s','T', T));
        end % if (fit index)
        % ideal gas pressure correction
        if Pflag
            done(:,massindex) = done(:,massindex) + mass(specindex,massindex)*(-R*log(P(:)/Pref));
        end
    end % for (mass index)
end % for (species index)

